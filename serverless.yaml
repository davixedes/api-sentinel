service: ocorrencia-service
frameworkVersion: "4"

provider:
  name: aws
  runtime: python3.9
  region: sa-east-1

  # Variáveis de ambiente para conexão ao Oracle
  environment:
    ORACLE_USER:     ${env:ORACLE_USER}
    ORACLE_PASSWORD: ${env:ORACLE_PASSWORD}
    ORACLE_DSN:      ${env:ORACLE_DSN}

  # Habilita CORS global para todas as rotas HTTP API
  httpApi:
    cors:
      allowedOrigins:
        - '*'                                         # permite qualquer origem
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
      allowCredentials: false                        # não compartilha cookies

functions:
  # ===== CRUD Ocorrência =====
  createOcorrencia:
    handler: ocorrencia/handler/create.handler
    events:
      - httpApi:
          path: /ocorrencia
          method: post

  listOcorrencias:
    handler: ocorrencia/handler/list.handler
    events:
      - httpApi:
          path: /ocorrencia
          method: get

  getOcorrencia:
    handler: ocorrencia/handler/get.handler
    events:
      - httpApi:
          path: /ocorrencia/{id}
          method: get

  updateOcorrencia:
    handler: ocorrencia/handler/update.handler
    events:
      - httpApi:
          path: /ocorrencia/{id}
          method: put

  deleteOcorrencia:
    handler: ocorrencia/handler/delete.handler
    events:
      - httpApi:
          path: /ocorrencia/{id}
          method: delete

  # ===== CRUD Funcionário =====
  createFuncionario:
    handler: funcionario/handler/create.handler
    events:
      - httpApi:
          path: /funcionario
          method: post

  listFuncionario:
    handler: funcionario/handler/list.handler
    events:
      - httpApi:
          path: /funcionario
          method: get

  getFuncionario:
    handler: funcionario/handler/get.handler
    events:
      - httpApi:
          path: /funcionario/{id}
          method: get

  updateFuncionario:
    handler: funcionario/handler/update.handler
    events:
      - httpApi:
          path: /funcionario/{id}
          method: put

  deleteFuncionario:
    handler: funcionario/handler/delete.handler
    events:
      - httpApi:
          path: /funcionario/{id}
          method: delete

  # ===== CRUD Atendimento =====
  createAtendimento:
    handler: atendimento/handler/create.handler
    events:
      - httpApi:
          path: /atendimento
          method: post

  listAtendimento:
    handler: atendimento/handler/list.handler
    events:
      - httpApi:
          path: /atendimento
          method: get

  getAtendimento:
    handler: atendimento/handler/get.handler
    events:
      - httpApi:
          path: /atendimento/{funcId}/{ocorrId}
          method: get

  updateAtendimento:
    handler: atendimento/handler/update.handler
    events:
      - httpApi:
          path: /atendimento/{funcId}/{ocorrId}
          method: put

  deleteAtendimento:
    handler: atendimento/handler/delete.handler
    events:
      - httpApi:
          path: /atendimento/{funcId}/{ocorrId}
          method: delete

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    dockerImage: public.ecr.aws/sam/build-python3.9:latest-x86_64
    dockerPlatform: linux/amd64
    slim: true
    strip: true
    pythonBin: python3.9
    noDeploy:
      - boto3
      - botocore
